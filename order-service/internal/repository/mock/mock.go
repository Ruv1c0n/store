// Code generated by MockGen. DO NOT EDIT.
// Source: db.go
//
// Generated by this command:
//
//	mockgen -source=db.go -destination=mock/mock.go
//

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	reflect "reflect"
	proto "store/proto"

	gomock "go.uber.org/mock/gomock"
)

// MockOrderDB is a mock of OrderDB interface.
type MockOrderDB struct {
	ctrl     *gomock.Controller
	recorder *MockOrderDBMockRecorder
	isgomock struct{}
}

// MockOrderDBMockRecorder is the mock recorder for MockOrderDB.
type MockOrderDBMockRecorder struct {
	mock *MockOrderDB
}

// NewMockOrderDB creates a new mock instance.
func NewMockOrderDB(ctrl *gomock.Controller) *MockOrderDB {
	mock := &MockOrderDB{ctrl: ctrl}
	mock.recorder = &MockOrderDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderDB) EXPECT() *MockOrderDBMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderDB) CreateOrder(ctx context.Context, orderID, productID, customerID, quantity int32, pricePerUnit float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, orderID, productID, customerID, quantity, pricePerUnit)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderDBMockRecorder) CreateOrder(ctx, orderID, productID, customerID, quantity, pricePerUnit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderDB)(nil).CreateOrder), ctx, orderID, productID, customerID, quantity, pricePerUnit)
}

// DeleteOrder mocks base method.
func (m *MockOrderDB) DeleteOrder(orderID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockOrderDBMockRecorder) DeleteOrder(orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockOrderDB)(nil).DeleteOrder), orderID)
}

// GetAllOrders mocks base method.
func (m *MockOrderDB) GetAllOrders() ([]*proto.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrders")
	ret0, _ := ret[0].([]*proto.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrders indicates an expected call of GetAllOrders.
func (mr *MockOrderDBMockRecorder) GetAllOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrders", reflect.TypeOf((*MockOrderDB)(nil).GetAllOrders))
}

// GetNextOrderID mocks base method.
func (m *MockOrderDB) GetNextOrderID(ctx context.Context, orderID *int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextOrderID", ctx, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetNextOrderID indicates an expected call of GetNextOrderID.
func (mr *MockOrderDBMockRecorder) GetNextOrderID(ctx, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextOrderID", reflect.TypeOf((*MockOrderDB)(nil).GetNextOrderID), ctx, orderID)
}

// GetOrderByID mocks base method.
func (m *MockOrderDB) GetOrderByID(orderID int32) (*proto.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", orderID)
	ret0, _ := ret[0].(*proto.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockOrderDBMockRecorder) GetOrderByID(orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockOrderDB)(nil).GetOrderByID), orderID)
}

// GetProductByID mocks base method.
func (m *MockOrderDB) GetProductByID(productID int32) (string, int, float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", productID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(float64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockOrderDBMockRecorder) GetProductByID(productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockOrderDB)(nil).GetProductByID), productID)
}

// UpdateOrder mocks base method.
func (m *MockOrderDB) UpdateOrder(orderID int32, items []*proto.OrderItem, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", orderID, items, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrderDBMockRecorder) UpdateOrder(orderID, items, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderDB)(nil).UpdateOrder), orderID, items, status)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: db.go
//
// Generated by this command:
//
//	mockgen -source=db.go -destination=mock/mock.go
//

// Package mock_db is a generated GoMock package.
package mock

import (
	reflect "reflect"
	"store/proto"

	gomock "go.uber.org/mock/gomock"
)

// MockCatalogDB is a mock of CatalogDB interface.
type MockCatalogDB struct {
	ctrl     *gomock.Controller
	recorder *MockCatalogDBMockRecorder
	isgomock struct{}
}

// MockCatalogDBMockRecorder is the mock recorder for MockCatalogDB.
type MockCatalogDBMockRecorder struct {
	mock *MockCatalogDB
}

// NewMockCatalogDB creates a new mock instance.
func NewMockCatalogDB(ctrl *gomock.Controller) *MockCatalogDB {
	mock := &MockCatalogDB{ctrl: ctrl}
	mock.recorder = &MockCatalogDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCatalogDB) EXPECT() *MockCatalogDBMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockCatalogDB) AddProduct(productName string, stockQuantity int, pricePerUnit float64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", productName, stockQuantity, pricePerUnit)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockCatalogDBMockRecorder) AddProduct(productName, stockQuantity, pricePerUnit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockCatalogDB)(nil).AddProduct), productName, stockQuantity, pricePerUnit)
}

// DeleteProduct mocks base method.
func (m *MockCatalogDB) DeleteProduct(productID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockCatalogDBMockRecorder) DeleteProduct(productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockCatalogDB)(nil).DeleteProduct), productID)
}

// GetAllProducts mocks base method.
func (m *MockCatalogDB) GetAllProducts() ([]*proto.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProducts")
	ret0, _ := ret[0].([]*proto.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProducts indicates an expected call of GetAllProducts.
func (mr *MockCatalogDBMockRecorder) GetAllProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProducts", reflect.TypeOf((*MockCatalogDB)(nil).GetAllProducts))
}

// GetProductByID mocks base method.
func (m *MockCatalogDB) GetProductByID(productID int32) (string, int, float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", productID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(float64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockCatalogDBMockRecorder) GetProductByID(productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockCatalogDB)(nil).GetProductByID), productID)
}

// UpdateProduct mocks base method.
func (m *MockCatalogDB) UpdateProduct(productID int, productName string, stockQuantity int, pricePerUnit float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", productID, productName, stockQuantity, pricePerUnit)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockCatalogDBMockRecorder) UpdateProduct(productID, productName, stockQuantity, pricePerUnit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockCatalogDB)(nil).UpdateProduct), productID, productName, stockQuantity, pricePerUnit)
}
